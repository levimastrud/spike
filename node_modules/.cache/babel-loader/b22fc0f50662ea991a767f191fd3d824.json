{"ast":null,"code":"var _jsxFileName = \"/Users/Levi/Desktop/Levi/EDA_Projects/movie-saga/src/index.js\";\nimport _regeneratorRuntime from \"/Users/Levi/Desktop/Levi/EDA_Projects/movie-saga/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchSpecificMovie),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(fetchAllMovies);\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport { createStore, combineReducers, applyMiddleware } from 'redux'; // Provider allows us to use redux within our react app\n\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger'; // Import saga middleware\n\nimport createSagaMiddleware from 'redux-saga';\nimport { takeEvery, put } from 'redux-saga/effects';\nimport axios from 'axios'; // Create the rootSaga generator function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery('FETCH_MOVIES', fetchAllMovies);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction fetchSpecificMovie() {\n  var movies;\n  return _regeneratorRuntime.wrap(function fetchSpecificMovie$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return axios.get('/api/movie/:movieId');\n\n        case 2:\n          movies = _context2.sent;\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction fetchAllMovies() {\n  var _movies;\n\n  return _regeneratorRuntime.wrap(function fetchAllMovies$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return axios.get('/api/movie');\n\n        case 3:\n          _movies = _context3.sent;\n          console.log('get all:', _movies.data);\n          _context3.next = 7;\n          return put({\n            type: 'SET_MOVIES',\n            payload: _movies.data\n          });\n\n        case 7:\n          _context3.next = 12;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log('get all error');\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n} // Create sagaMiddleware\n\n\nvar sagaMiddleware = createSagaMiddleware(); // Used to store movies returned from the server\n\nvar movies = function movies() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_MOVIES':\n      return action.payload;\n\n    default:\n      return state;\n  }\n}; // Used to store the movie genres\n\n\nvar genres = function genres() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_GENRES':\n      return action.payload;\n\n    default:\n      return state;\n  }\n}; // Create one store that all components can use\n\n\nvar storeInstance = createStore(combineReducers({\n  movies: movies,\n  genres: genres\n}), // Add sagaMiddleware to our store\napplyMiddleware(sagaMiddleware, logger)); // Pass rootSaga into our sagaMiddleware\n\nsagaMiddleware.run(rootSaga);\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: storeInstance,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 73,\n  columnNumber: 5\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/Levi/Desktop/Levi/EDA_Projects/movie-saga/src/index.js"],"names":["rootSaga","fetchSpecificMovie","fetchAllMovies","React","ReactDOM","App","createStore","combineReducers","applyMiddleware","Provider","logger","createSagaMiddleware","takeEvery","put","axios","get","movies","console","log","data","type","payload","sagaMiddleware","state","action","genres","storeInstance","run","render","document","getElementById"],"mappings":";;;oDAcUA,Q;qDAIAC,kB;qDAIAC,c;;AAtBV,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D,C,CACA;;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,oBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;;;AACA,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMY,SAAS,CAAC,cAAD,EAAiBV,cAAjB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUD,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACmB,iBAAMa,KAAK,CAACC,GAAN,CAAU,qBAAV,CAAN;;AADnB;AACUC,UAAAA,MADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUd,cAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGuB,iBAAMY,KAAK,CAACC,GAAN,CAAU,YAAV,CAAN;;AAHvB;AAGcC,UAAAA,OAHd;AAIQC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,OAAM,CAACG,IAA/B;AAJR;AAKQ,iBAAMN,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAE,YAAR;AAAsBC,YAAAA,OAAO,EAAEL,OAAM,CAACG;AAAtC,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQF,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAaA;;;AACA,IAAMI,cAAc,GAAGX,oBAAoB,EAA3C,C,CAEA;;AACA,IAAMK,MAAM,GAAG,SAATA,MAAS,GAAwB;AAAA,MAAvBO,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACnC,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAK,YAAL;AACI,aAAOI,MAAM,CAACH,OAAd;;AACJ;AACI,aAAOE,KAAP;AAJR;AAMH,CAPD,C,CASA;;;AACA,IAAME,MAAM,GAAG,SAATA,MAAS,GAAwB;AAAA,MAAvBF,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACnC,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAK,YAAL;AACI,aAAOI,MAAM,CAACH,OAAd;;AACJ;AACI,aAAOE,KAAP;AAJR;AAMH,CAPD,C,CASA;;;AACA,IAAMG,aAAa,GAAGpB,WAAW,CAC7BC,eAAe,CAAC;AACZS,EAAAA,MAAM,EAANA,MADY;AAEZS,EAAAA,MAAM,EAANA;AAFY,CAAD,CADc,EAK7B;AACAjB,eAAe,CAACc,cAAD,EAAiBZ,MAAjB,CANc,CAAjC,C,CASA;;AACAY,cAAc,CAACK,GAAf,CAAmB3B,QAAnB;AAEAI,QAAQ,CAACwB,MAAT,eACI,QAAC,KAAD,CAAO,UAAP;AAAA,yBACI,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEF,aAAjB;AAAA,2BACA,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,QADJ,EAMIG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANJ","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n// Provider allows us to use redux within our react app\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n// Import saga middleware\nimport createSagaMiddleware from 'redux-saga';\nimport { takeEvery, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// Create the rootSaga generator function\nfunction* rootSaga() {\n    yield takeEvery('FETCH_MOVIES', fetchAllMovies);\n}\n\nfunction* fetchSpecificMovie () {\n    const movies = yield axios.get('/api/movie/:movieId')\n}\n\nfunction* fetchAllMovies() {\n    // get all movies from the DB\n    try {\n        const movies = yield axios.get('/api/movie');\n        console.log('get all:', movies.data);\n        yield put({ type: 'SET_MOVIES', payload: movies.data });\n\n    } catch {\n        console.log('get all error');\n    }\n        \n}\n\n// Create sagaMiddleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Used to store movies returned from the server\nconst movies = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_MOVIES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Used to store the movie genres\nconst genres = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_GENRES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Create one store that all components can use\nconst storeInstance = createStore(\n    combineReducers({\n        movies,\n        genres,\n    }),\n    // Add sagaMiddleware to our store\n    applyMiddleware(sagaMiddleware, logger),\n);\n\n// Pass rootSaga into our sagaMiddleware\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={storeInstance}>\n        <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}